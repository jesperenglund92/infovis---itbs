(function (d3$1) {
  'use strict';

  const dataJSON = `[
  {
    "grade": "Kindergarten",
    "needed": 9.5,
    "averaged": 8.5
  },
  {
    "grade": "First grade",
    "needed": 9.1,
    "averaged": 8.4
  },
  {
    "grade": "Second grade",
    "needed": 9.3,
    "averaged": 8.3
  },
  {
    "grade": "Third grade",
    "needed": 8.6,
    "averaged": 8.1
  },
  {
    "grade": "Fourth grade",
    "needed": 8.9,
    "averaged": 7.9
  },
  {
    "grade": "Fifth grade",
    "needed": 8.9,
    "averaged": 7.8
  },
  {
    "grade": "Sixth grade",
    "needed": 8.6,
    "averaged": 7.6
  },
  {
    "grade": "Seventh grade",
    "needed": 8.5,
    "averaged": 7.3
  },
  {
    "grade": "Eighth grade",
    "needed": 8.5,
    "averaged": 7.4
  },
  {
    "grade": "Ninth grade",
    "needed": 8.3,
    "averaged": 7.1
  },
  {
    "grade": "10th grade",
    "needed": 8.4,
    "averaged": 6.8
  },
  {
    "grade": "11th grade",
    "needed": 8.4,
    "averaged": 6.9
  },
  {
    "grade": "12th grade",
    "needed": 8.0,
    "averaged": 6.6
  }
]`;
  const data = JSON.parse(dataJSON);

  const svg = d3$1.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  const keys = ['Sleep averaged', 'Sleep needed'];

  var color = d3.scaleOrdinal()
    .domain(keys)
    .range(d3.schemeSet2);

  const render = data => {
    const xValueNeeded = d => d.needed;
    const xValueAveraged = d => d.averaged;
    const yValue = d => d.grade;
    const margin = { top: 40, right: 40, bottom: 40, left: 80 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3$1.scaleLinear()
    	.domain([0, d3$1.max(data, xValueNeeded)])
    	.range([0, innerWidth]);
    
    const xScaleTwo = d3$1.scaleLinear()
    .domain([0, d3$1.max(data, xValueAveraged)])
    .range([0, innerWidth]);
    
    const yScale = d3$1.scaleBand()
    	.domain(data.map(yValue))
    	.range([0, innerHeight])
    	.padding(0.3);
    
    const g = svg.append('g')
    	.attr('transform', `translate(${margin.left},${margin.top})`);
    
  	g.append('rect');
    
    g.append('g').call(d3$1.axisLeft(yScale));
    g.append('g').call(d3$1.axisBottom(xScale))
    	.attr('transform', `translate(0,${innerHeight})`);
    
    g.selectAll('.testone').data(data)
    	.enter().append('rect')
    		.attr('y', d => yScale(yValue(d)))
    		.attr('width', d => xScale(xValueNeeded(d)))
    		.attr('height', yScale.bandwidth())
    		.attr('class', 'testone');
    
    g.selectAll('.testtwo').data(data)
    .enter().append('rect')
      .attr('y', d => yScale(yValue(d)))
      .attr('width', d => xScale(xValueAveraged(d)))
      .attr('height', yScale.bandwidth())
      .attr('class', 'testtwo');
    
    g.selectAll("mydots")
    .data(keys)
    .enter()
    .append("circle")
      .attr("cx", function(d,i){ return margin.left + i*200})
      .attr("cy", -10)
      .attr("r", 7)
      .style("fill", function(d){ return color(d)});
    
    g.selectAll("mylabels")
    .data(keys)
    .enter()
    .append("text")
      .attr("x", function(d,i){ return margin.left + 20 + i*200})
      .attr("y", -10)
      .style("fill", function(d){ return color(d)})
      .text(function(d){ return d})
      .attr("text-anchor", "left")
      .style("alignment-baseline", "middle");
    
  };

  render(data);

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,